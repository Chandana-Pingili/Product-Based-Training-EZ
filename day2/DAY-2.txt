TIME COMPLEXITY

TYPE-2:

for(i=0;i<n;i++)
{
for(j=0;j<n;j++)
{
//statements
}
}

Time complexity=O(n^2)

Note: irrespective of the increment i.e.,i++ i-- i+2  i-2.....

Implement a 2D array and rotate the matrix in 90 degree

	#include <stdio.h>

	void main()

	{
	int n,i,j,temp; n=2;	
	scanf("%d",&n);
	int a[20][20];
	for(i=0;i<n;i++)
	{
	for(j=0;j<n;j++)
	{
	scanf("%d",&a[i][j]);
	}
	}

	for(i=0;i<n;i++)
	{
	for(j=n-1;j>=0;j--)
	{
	printf("%d ",a[j][i]);
	}
	printf("\n");
	}
	}


for(i=0;in;i++
{
for(j=0;j<i;j++)
{
//statements
}
}
 when 
	i	j
	0	nothing happens
	1	0 executes,1 stops
	2	0,1 executes,2 stops

so when i=0 0times
i=1 1time
i=2  2 times
 
time complexity=O(n^2)

p=0
for(i=1;p<=n;i++)
{
p=p+i;
}

	i	p
1	0+1	p=p+1 when n=0
2	1+2	3    when n is 1
3	1+2+3	6    when n is 2
.
.
k  k(k+1)/2

TYPE-3
 for(i=1;i<=n;i*2)
{
//statements
}

ANALYSE

i=1	1
i=2	1*2=2
i=3	1*2*2=4
i=4	1*2*2*2=8
so loop executes until i<n and stops when i becomes >= n
i=2^k
2^k>=n
k=log n base 2

so the time complexity O(n log base 2)

create an dynamic 1D array  it should contain numbers 10 to 30 exctract a grid 
-even numbers
-2^ numbers


for(i=n;i>=1;i=i/2)
{
//statements
}
 
loop executes starts when i<1

n/2 power k<n


DIFFERENT TIME COMPLEXITIES:

Constant time complexity  : O(1)
Linear Time Complexity: O(n)
Logarithmic Time Complexity: O(log n)
Quadratic Time Complexity: O(n^2)
Exponential Time Complexity: O(2^n)


FINAL SUMMARY

i++ i-- i+2	O(n)
i*2 i/2		log(n)  base 2
p=0
for p<n i++	O(sqrt(n))
p=p+i



